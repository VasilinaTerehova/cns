{
 "layout": {
  "title": "notifications",
  "rows": [
   {
    "id": "9ff2e6a1-3699-5f47-da20-a0b0ef81b3ae",
    "type": "LayoutResourceFile",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "cnsCSS",
      "type": "Id"
     },
     {
      "name": "resourceFile",
      "value": "${system:../static/custom/css/cns.css}",
      "type": "ResourceFile"
     },
     {
      "name": "resourceType",
      "value": "Css",
      "type": "Label"
     }
    ]
   },
   {
    "id": "fa5ca01a-25a8-094c-a44c-5763bf52546f",
    "type": "BootstrapPanel",
    "typeDesc": "Bootstrap Panel",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapPanelStyle",
      "value": "panel-default",
      "type": "bootstrapPanelStyleCustom"
     }
    ]
   },
   {
    "id": "64f6921a-ae00-16bc-f1c0-e01645bd1618",
    "type": "BootstrapPanelHeader",
    "typeDesc": "Panel Header",
    "parent": "fa5ca01a-25a8-094c-a44c-5763bf52546f",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "b770a559-88de-9c38-df61-b64f3b37e3ac",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "64f6921a-ae00-16bc-f1c0-e01645bd1618",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "Notifications ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "a1abbcbc-d44f-8f8e-0200-ea079e35e655",
    "type": "BootstrapPanelBody",
    "typeDesc": "Panel Body",
    "parent": "fa5ca01a-25a8-094c-a44c-5763bf52546f",
    "properties": [
     {
      "name": "name",
      "value": "tableObj",
      "type": "Id"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "tableObj",
      "type": "String"
     }
    ]
   }
  ]
 },
 "components": {
  "rows": [
   {
    "id": "OTHERCOMPONENTS",
    "name": "Others",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "Others",
      "type": "Label"
     }
    ]
   },
   {
    "id": "2e300183-f484-426f-393c-66421cf7971a",
    "type": "ComponentsTable",
    "typeDesc": "table Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "notifications",
      "type": "Id"
     },
     {
      "name": "expandContainerObject",
      "value": "",
      "type": "String"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "oLanguage",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "language",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "expandParameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "colSortable",
      "value": "[\"true\",\"true\",\"true\",\"false\",\"false\"]",
      "type": "Array"
     },
     {
      "name": "colFormats",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "colWidths",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "colHeaders",
      "value": "[\"Date\",\"Author\",\"Message\",\"Actions\",\"Unread\"]",
      "type": "Array"
     },
     {
      "name": "colTypes",
      "value": "[\"string\",\"string\",\"string\",\"formattedText\",\"string\"]",
      "type": "colTypesCustom"
     },
     {
      "name": "paginate",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "lengthChange",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "filter",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "info",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "sort",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "expandOnClick",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "displayLength",
      "value": "15",
      "type": "Integer"
     },
     {
      "name": "colSearchable",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "drawCallback",
      "value": "function f(){\r\n    var placeholder = this.ph;\r\n    var tdCheckbox = \"<td class='checkboxColumn'><div class='checkbox'></div></td>\";\r\n    \r\n    placeholder.find('tbody > tr').each(function() {\r\n        \r\n        var unread = $(this).find('td.column4').text();\r\n        \r\n        if(unread == \"true\") {\r\n            $(this).addClass('unread');\r\n        } else if (unread == \"false\") {\r\n            $(this).addClass('read');\r\n        }\r\n        \r\n        \r\n        var isCheckboxAdded =  $(this).find('td').eq(0).size() > 0\r\n                && \"checkboxColumn\" == $(this).find('td').eq(0)[0].className;\r\n        \r\n        // add checkbox td if it hasn't got one already\r\n        if( !isCheckboxAdded ){ $(this).find('td').eq(0).before(tdCheckbox); }\r\n    });\r\n    \r\n    var theadCheckbox = \"<th class='checkboxColumn'><div class='checkbox'></div></th>\"\r\n    \r\n    var theadCheckboxColumnAdded = placeholder.find('thead > tr > th') \r\n        && placeholder.find('thead > tr > th').length > 0\r\n        && \"checkboxColumn\" == placeholder.find('thead > tr > th')[0].className;\r\n        \r\n    if( !theadCheckboxColumnAdded ){\r\n        placeholder.find('thead > tr').prepend(theadCheckbox);\r\n    }\r\n    \r\n    placeholder.find('tbody .checkbox').off('click').on('click' , function() {\r\n        var checkboxRow = $(this).closest('tr');\r\n            \r\n        // toggle clicked checkbox's 'checked' class\r\n        checkboxRow.toggleClass('checked');\r\n        \r\n        var tbodyCheckboxes = $('tbody tr'),\r\n            tbodyCheckboxesLength = tbodyCheckboxes.length,\r\n            tbodyCheckboxesChecked = $('tbody tr.checked');\r\n            tbodyCheckboxesCheckedLength = tbodyCheckboxesChecked.length;\r\n        \r\n        // if all tbody checkboxes are checked after the click,\r\n        // add checked-all class to thead checkbox\r\n        if(tbodyCheckboxesLength == tbodyCheckboxesCheckedLength) {\r\n            $('thead .checkbox').closest('tr').removeClass('checked-some').addClass('checked-all');\r\n        }\r\n        \r\n        // if only some of the tbody checkboxes are checked after the click,\r\n        // add checked-some class to thead checkbox\r\n        if(tbodyCheckboxesLength > tbodyCheckboxesCheckedLength && tbodyCheckboxesCheckedLength > 0) {\r\n            $('thead .checkbox').closest('tr').removeClass('checked-all').addClass('checked-some');\r\n        }\r\n        \r\n        // if none of the tbody checkboxes are checked after the click,\r\n        // remove checked-all and checked-some classes from thead checkbox\r\n        if(tbodyCheckboxesCheckedLength === 0) {\r\n            $('thead .checkbox').closest('tr').removeClass('checked-some checked-all');\r\n        }\r\n        \r\n        return false;\r\n    });\r\n    \r\n    placeholder.find('thead .checkbox').off('click').on('click', function() {\r\n        var checkbox = $(this),\r\n            checkboxRow = checkbox.closest('tr'),\r\n            tbodyCheckboxes = $('tbody tr'),\r\n            tbodyCheckboxesLength = tbodyCheckboxes.length,\r\n            tbodyCheckboxesChecked = $('tbody tr.checked');\r\n            tbodyCheckboxesCheckedLength = tbodyCheckboxesChecked.length;\r\n        \r\n        // if none of the checkboxes are checked\r\n        if(tbodyCheckboxesCheckedLength === 0) {\r\n            checkboxRow.addClass('checked-all');\r\n            // check all checkboxes\r\n            tbodyCheckboxes.addClass('checked');\r\n        }\r\n        \r\n        // if none of the checkboxes are checked\r\n        if(tbodyCheckboxesCheckedLength > 0) {\r\n            checkboxRow.removeClass('checked-some checked-all');\r\n            // uncheck all checkboxes\r\n            tbodyCheckboxes.removeClass('checked');\r\n        }\r\n        \r\n    });\r\n    \r\n    placeholder.find('.column4, .column3').remove();\r\n    \r\n    // check if actions container exists\r\n    var actionsContainerAdded = placeholder.find('.actions-container').length > 0;\r\n    \r\n    if(!actionsContainerAdded) {\r\n        // add actions div\r\n        placeholder.find('.dataTables_wrapper').prepend('<div class=\"actions-container pull-right\"></div>');\r\n        \r\n        // add delete button\r\n        placeholder.find('.actions-container').append('<div class=\"pull-left\"><button class=\"delete-button\"></button></div>');\r\n        \r\n        // add actions selector\r\n        var actionsSelector = '<div class=\"pull-left actions-selector\">'\r\n                            + '<div class=\"selector-button\">More..</div>'\r\n                            + '<div class=\"selector-dropdown\">'\r\n                            + '<button id=\"markRead\">Mark as read</button>'\r\n                            + '<button id=\"markUnread\">Mark as unread</button>'\r\n                            + '</div>'\r\n                            + '</div>';\r\n        placeholder.find('.actions-container').append(actionsSelector);\r\n        \r\n        // add actions selector interaction\r\n        placeholder.find('.actions-container .selector-button').click(function() {\r\n            $(this).closest('.actions-selector').toggleClass('open');       \r\n        });\r\n        \r\n        // add interaction to mark as read button\r\n        placeholder.find('#markRead').click(function() {\r\n            $(this).closest('.actions-selector').toggleClass('open');   \r\n            \r\n            // mark as read code here\r\n        });\r\n        \r\n        // add interaction to mark as unread button\r\n        placeholder.find('#markUnread').click(function() {\r\n            $(this).closest('.actions-selector').toggleClass('open');   \r\n            \r\n            // mark as unread code here\r\n        });\r\n        \r\n        $(document).mouseup(function (e) {\r\n            var container = $('.actions-selector');\r\n                    \r\n            if (!container.is(e.target) // if the target of the click isn't the container...\r\n                && container.has(e.target).length === 0 ) // ... nor a descendant of the container\r\n            {\r\n                container.removeClass('open');\r\n            }\r\n        });\r\n    }\r\n} ",
      "type": "JavaScript"
     },
     {
      "name": "dataSource",
      "value": "notifications",
      "type": "Datasource"
     },
     {
      "name": "sortBy",
      "value": "[[\"0\",\"desc\"]]",
      "type": "SortByArray"
     },
     {
      "name": "sDom",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "refreshPeriod",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "tableStyle",
      "value": "bootstrap",
      "type": "TableStyle"
     },
     {
      "name": "paginationType",
      "value": "simple_numbers",
      "type": "PaginationType"
     },
     {
      "name": "htmlObject",
      "value": "${p:tableObj}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "paginateServerside",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "function notificationActions() {\n  \n  var opts = {\n    \n    textFormat: function( id , st ) {\n      var $deleteButton = $( '<button name=\\'delete-notification\\' class=\\'delete-notification btn btn-default\\'  notification=' + id + '></button>' );\n      $deleteButton.on('click', function( e ){\n        \n        if( e && e.srcElement.attributes[\"notification\"] ){\n          \n          var id = e.srcElement.attributes[\"notification\"].value;\n          \n          $.ajax({\n            type: 'GET',\n            url: '/pentaho/plugin/cns/api/deletenotifications?paramnotifications=' + id,\n            success: function ( xhr ) {\n              //alert(\"deleted successfully\");\n              render_notifications.update();\n            },\n            error: function ( xhr, error ) {\n              alert(\"error deleting -> \" + error );\n            }\n          });\n        }\n      });\n      \n      var isUnread = st.tableData[rowIdx][4]; // 4th column, unread flag\n      var markAsLabel = 'mark as ' + ( isUnread ? 'read' : 'unread' );\n      \n      var $updateUnreadFlagButton = $( '<button name=\\'update-unread-flag-notification\\' class=\\'update-unread-flag-notification btn btn-default\\'  notification=' + id + ' unread=' + isUnread + '></button>' );\n      $updateUnreadFlagButton.on('click', function( e ){\n        \n        if( e && e.srcElement.attributes[\"notification\"] ){\n          \n          var id = e.srcElement.attributes[\"notification\"].value;\n          var unread = ( e.srcElement.attributes[\"unread\"].value == \"true\" ) ? true : false;\n          \n          $.ajax({\n            type: 'GET',\n            url: '/pentaho/plugin/cns/api/updatenotificationsunreadflag?paramnotifications=' + id + '&paramunread=' + !unread,\n            success: function ( xhr ) {\n              render_notifications.update();\n            },\n            error: function ( xhr, error ) {\n              alert(\"error deleting -> \" + error );\n            }\n          });\n        }\n      });\n      \n      return [$deleteButton,$updateUnreadFlagButton];\n    }\n  }\n  \n  this.setAddInOptions( \"colType\", \"formattedText\", opts );\n  \n  this.extraOptions = [\n    [ \"aoColumnDefs\"   ,  [ { \"asSorting\": [ \"desc\", \"asc\" ], aTargets: [ 0 ] } ]  ],\n    [ \"oLanguage\" , {\"sSearch\": \"\"}]\n  ]\n} ",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "extraOptions",
      "value": "[]",
      "type": "OptionArray"
     },
     {
      "name": "clickAction",
      "value": "",
      "type": "JavaScript"
     }
    ]
   }
  ]
 },
 "datasources": {
  "rows": [
   {
    "id": "SQL",
    "name": "SQL Queries",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "SQL Queries",
      "type": "Label"
     }
    ]
   },
   {
    "id": "0a56c773-c21a-33cb-c9aa-716d1c31731a",
    "type": "Componentssql_sqlJndi",
    "typeDesc": "sql over sqlJndi",
    "meta": "CDA",
    "meta_conntype": "sql.jndi",
    "meta_datype": "sql",
    "parent": "SQL",
    "properties": [
     {
      "name": "name",
      "value": "dummy",
      "type": "Id"
     },
     {
      "name": "access",
      "value": "public",
      "type": "Access"
     },
     {
      "name": "jndi",
      "value": "",
      "type": "Jndi"
     },
     {
      "name": "query",
      "value": "",
      "type": "SqlQuery"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "CdaParameters"
     },
     {
      "name": "output",
      "value": "[]",
      "type": "IndexArray"
     },
     {
      "name": "outputMode",
      "value": "include",
      "type": "OutputMode"
     },
     {
      "name": "cdacolumns",
      "value": "[]",
      "type": "CdaColumnsArray"
     },
     {
      "name": "cdacalculatedcolumns",
      "value": "[]",
      "type": "CdaCalculatedColumnsArray"
     },
     {
      "name": "cacheDuration",
      "value": 3600,
      "type": "Integer"
     },
     {
      "name": "cache",
      "value": "true",
      "type": "Boolean"
     }
    ]
   },
   {
    "id": "CNP_CPKENDPOINTS",
    "name": "CNP Endpoints",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "CNP Endpoints",
      "type": "Label"
     }
    ]
   },
   {
    "id": "8ac3ba83-2753-1f74-21eb-0fd0b745988d",
    "type": "Componentscns_getNotifications_CPKENDPOINT",
    "typeDesc": "getNotifications Endpoint",
    "parent": "CNP_CPKENDPOINTS",
    "properties": [
     {
      "name": "name",
      "value": "notifications",
      "type": "Id"
     },
     {
      "name": "stepName",
      "value": "OUTPUT",
      "type": "String"
     },
     {
      "name": "kettleOutput",
      "value": "Inferred",
      "type": "kettleOutputCustom"
     }
    ],
    "meta": "CPK",
    "meta_pluginId": "cns",
    "meta_endpoint": "getNotifications"
   }
  ]
 },
 "filename": "/system/cns/dashboards/notifications.cdfde"
}