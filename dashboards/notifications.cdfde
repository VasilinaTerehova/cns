{
 "layout": {
  "title": "notifications",
  "rows": [
   {
    "id": "9ff2e6a1-3699-5f47-da20-a0b0ef81b3ae",
    "type": "LayoutResourceFile",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "cnsCSS",
      "type": "Id"
     },
     {
      "name": "resourceFile",
      "value": "${system:../static/custom/css/cns.css}",
      "type": "ResourceFile"
     },
     {
      "name": "resourceType",
      "value": "Css",
      "type": "Label"
     }
    ]
   },
   {
    "id": "fa5ca01a-25a8-094c-a44c-5763bf52546f",
    "type": "BootstrapPanel",
    "typeDesc": "Bootstrap Panel",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "bootstrapPanelStyle",
      "value": "panel-default",
      "type": "bootstrapPanelStyleCustom"
     }
    ]
   },
   {
    "id": "64f6921a-ae00-16bc-f1c0-e01645bd1618",
    "type": "BootstrapPanelHeader",
    "typeDesc": "Panel Header",
    "parent": "fa5ca01a-25a8-094c-a44c-5763bf52546f",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "b770a559-88de-9c38-df61-b64f3b37e3ac",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "64f6921a-ae00-16bc-f1c0-e01645bd1618",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "Notifications ",
      "type": "Html"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "a1abbcbc-d44f-8f8e-0200-ea079e35e655",
    "type": "BootstrapPanelBody",
    "typeDesc": "Panel Body",
    "parent": "fa5ca01a-25a8-094c-a44c-5763bf52546f",
    "properties": [
     {
      "name": "name",
      "value": "tableObj",
      "type": "Id"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     },
     {
      "name": "cssClass",
      "value": "tableObj",
      "type": "String"
     }
    ]
   }
  ]
 },
 "components": {
  "rows": [
   {
    "id": "OTHERCOMPONENTS",
    "name": "Others",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "Others",
      "type": "Label"
     }
    ]
   },
   {
    "id": "2e300183-f484-426f-393c-66421cf7971a",
    "type": "ComponentsTable",
    "typeDesc": "table Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "notifications",
      "type": "Id"
     },
     {
      "name": "expandContainerObject",
      "value": "",
      "type": "String"
     },
     {
      "name": "listeners",
      "value": "['${p:showFilter}']",
      "type": "Listeners"
     },
     {
      "name": "oLanguage",
      "value": "{\r\n    \"sInfo\": \"<b>_START_</b>â€“<b>_END_</b> of <b>_TOTAL_</b>\",\r\n    \"sInfoEmpty\": \"\",\r\n    \"sInfoFiltered\": \"\",\r\n} ",
      "type": "JavaScript"
     },
     {
      "name": "language",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "colFormats",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "colWidths",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "colHeaders",
      "value": "[\"ID\",\"Date\",\"Author\",\"Message\"]",
      "type": "Array"
     },
     {
      "name": "parameters",
      "value": "[[\"filter\",\"showFilter\"]]",
      "type": "ValuesArray"
     },
     {
      "name": "expandParameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "colSortable",
      "value": "[\"false\",\"true\",\"true\",\"true\"]",
      "type": "Array"
     },
     {
      "name": "colTypes",
      "value": "[\"string\",\"string\",\"string\",\"string\"]",
      "type": "colTypesCustom"
     },
     {
      "name": "paginate",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "lengthChange",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "filter",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "info",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "sort",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "expandOnClick",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "displayLength",
      "value": "10",
      "type": "Integer"
     },
     {
      "name": "colSearchable",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "drawCallback",
      "value": "function f(){\n\n    var placeholder = this.ph;\n    \n    placeholder.find( 'tbody > tr' ).each( function() {\n        \n        // td.column0 holds a compound id of <id>:<unread>\n        var checkboxColumn = $( this ).find( 'td.column0' );\n        \n        // '<id>:<unread>' ( ex: '74:unread', '23:read' )\n        var compoundId = checkboxColumn.text();\n        \n        var delimiter = \":\";\n        \n        var id = compoundId.split( delimiter )[0]; // notification id\n        var unread = compoundId.split( delimiter )[1]; // unread flag\n        \n        $( this ).addClass( unread ); // one of 'read' / 'unread'\n        \n        // ensure td has checkboxColumn class\n        if( !checkboxColumn.hasClass( \"checkboxColumn\" ) ){\n            \n            checkboxColumn.text( '' ); // clear the compoundId text\n            checkboxColumn.addClass( \"checkboxColumn\" );\n            checkboxColumn.attr( \"notification\", id );\n            checkboxColumn.attr( \"unread\", unread );\n            checkboxColumn.attr( \"unread\", unread );\n        }\n        \n        // .. and its child div holds the 'id' and 'unread' attributes\n        if( checkboxColumn.find( \"div.checkbox\" ).length === 0 ){\n            \n            // create the div\n            \n            var $checkboxDiv = $( \"<div class='checkbox' notification='\" + id + \"' unread='\" + unread + \"'></div>\" );\n            \n            // define the click behaviour\n            \n            $checkboxDiv.on( 'click', function( e ) {\n                e.stopPropagation();\n        \n                if( e && e.srcElement.attributes[\"notification\"] ){\n                  \n                    var id = e.srcElement.attributes[\"notification\"].value;\n                    var unread = e.srcElement.attributes[\"unread\"].value;\n                  \n                    var checkboxRow = $(this).closest('tr');\n            \n                    // toggle clicked checkbox's 'checked' class\n                    checkboxRow.toggleClass('checked');\n        \n                    var tbodyCheckboxes = $('tbody tr'),\n                        tbodyCheckboxesLength = tbodyCheckboxes.length,\n                        tbodyCheckboxesChecked = $('tbody tr.checked');\n                        tbodyCheckboxesCheckedLength = tbodyCheckboxesChecked.length;\n        \n                    // if all tbody checkboxes are checked after the click,\n                    // add checked-all class to thead checkbox\n                    if(tbodyCheckboxesLength == tbodyCheckboxesCheckedLength) {\n                        $('thead .checkbox').closest('tr').removeClass('checked-some').addClass('checked-all');\n                    }\n                    \n                    // if only some of the tbody checkboxes are checked after the click,\n                    // add checked-some class to thead checkbox\n                    if(tbodyCheckboxesLength > tbodyCheckboxesCheckedLength && tbodyCheckboxesCheckedLength > 0) {\n                        $('thead .checkbox').closest('tr').removeClass('checked-all').addClass('checked-some');\n                    }\n                    \n                    // if none of the tbody checkboxes are checked after the click,\n                    // remove checked-all and checked-some classes from thead checkbox\n                    if(tbodyCheckboxesCheckedLength === 0) {\n                        $('thead .checkbox').closest('tr').removeClass('checked-some checked-all');\n                    }\n                    \n                    // show buttons interaction\n                    \n                    // if only some of the tbody checkboxes are checked after the click,\n                    // add checked-some class to thead checkbox\n                    if(tbodyCheckboxesCheckedLength > 0) {\n                        placeholder.addClass('show-delete');\n                        if($('tbody tr.checked.read').length > 0 && $('tbody tr.checked.unread').length > 0) {\n                            placeholder.addClass('show-mark-read show-mark-unread');\n                        } else if($('tbody tr.checked.read').length > 0 && $('tbody tr.checked.unread').length == 0) {\n                            placeholder.addClass('show-mark-unread');\n                            placeholder.removeClass('show-mark-read');\n                        } else if($('tbody tr.checked.read').length == 0 && $('tbody tr.checked.unread').length > 0) {\n                            placeholder.addClass('show-mark-read');\n                            placeholder.removeClass('show-mark-unread');\n                        }\n                    } else {\n                        placeholder.removeClass('show-delete show-mark-read show-mark-unread');\n                    }\n                    \n                    return false;\n                }\n              });\n            \n            checkboxColumn.append( $checkboxDiv );\n        }\n        \n    });\n} ",
      "type": "JavaScript"
     },
     {
      "name": "dataSource",
      "value": "notifications",
      "type": "Datasource"
     },
     {
      "name": "sDom",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "sortBy",
      "value": "[[\"1\",\"desc\"]]",
      "type": "SortByArray"
     },
     {
      "name": "refreshPeriod",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "priority",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "tableStyle",
      "value": "bootstrap",
      "type": "TableStyle"
     },
     {
      "name": "paginationType",
      "value": "two_button",
      "type": "PaginationType"
     },
     {
      "name": "htmlObject",
      "value": "${p:tableObj}",
      "type": "HtmlObject"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "paginateServerside",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "preExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "function f(){\n \n    var placeholder = this.ph;\n    \n    if( !placeholder.find( 'thead > tr > th.column0' ).hasClass( \"checkboxColumn\" ) ){\n        \n        // clear th's text\n        placeholder.find( 'thead > tr > th.column0' ).text('');\n        \n        // add checkboxColumn class\n        placeholder.find( 'thead > tr > th.column0' ).addClass( \"checkboxColumn\" );\n        \n        // add child checkbox div\n        var $headerCheckboxDiv = $( '<div class=\"checkbox\"></div>' );\n        \n        $headerCheckboxDiv.on('click', function() {\n        \n            var checkbox = $(this),\n                checkboxRow = checkbox.closest('tr'),\n                tbodyCheckboxes = $('tbody tr'),\n                tbodyCheckboxesLength = tbodyCheckboxes.length,\n                tbodyCheckboxesChecked = $('tbody tr.checked');\n                tbodyCheckboxesCheckedLength = tbodyCheckboxesChecked.length;\n            \n            // if none of the checkboxes are checked\n            if(tbodyCheckboxesCheckedLength === 0) {\n                checkboxRow.addClass('checked-all');\n                checkboxRow.removeClass('checked-some');\n                // check all checkboxes\n                tbodyCheckboxes.addClass('checked');\n                \n                // show propper action buttons \n                placeholder.addClass('show-delete');\n                if($('tbody tr.checked.read').length > 0 && $('tbody tr.checked.unread').length > 0) {\n                    placeholder.addClass('show-mark-read show-mark-unread');\n                } else if($('tbody tr.checked.read').length > 0 && $('tbody tr.checked.unread').length == 0) {\n                    placeholder.addClass('show-mark-unread');\n                    placeholder.removeClass('show-mark-read');\n                } else if($('tbody tr.checked.read').length == 0 && $('tbody tr.checked.unread').length > 0) {\n                    placeholder.addClass('show-mark-read');\n                    placeholder.removeClass('show-mark-unread');\n                }\n            }\n            \n            // if some of the checkboxes are checked\n            if(tbodyCheckboxesCheckedLength > 0) {\n                checkboxRow.removeClass('checked-some checked-all');\n                \n                // uncheck all checkboxes\n                tbodyCheckboxes.each(function() {\n                    $(this).removeClass('checked');\n                });\n                \n                // hide action buttons \n                placeholder.removeClass('show-delete show-mark-read show-mark-unread');\n            }\n            \n            \n        });\n        \n        placeholder.find( 'thead > tr > th.column0' ).prepend( $headerCheckboxDiv );\n    }\n    \n    // add responsive behaviour to table\n    placeholder.find('table').wrap( \"<div class='table-responsive'></div>\" );\n    \n    // check if actions container exists\n    var actionsContainerAdded = placeholder.find('.actions-container').length > 0;\n    \n    if(!actionsContainerAdded) {\n        // add actions div\n        placeholder.find('.dataTables_wrapper').prepend('<div class=\"actions-container pull-right\"></div>');\n        \n        // add delete button\n        var $deleteButton = $( '<button class=\"delete-button\">Delete</button>' ),\n            $markReadButton = $('<button id=\"markRead\" class=\"markRead\">Mark as read</button>'),\n            $markUnreadButton = $('<button id=\"markUnread\" class=\"markUnread\">Mark as unread</button>');\n        \n         $deleteButton.on('click', function() {\n            \n            var commaSeparatedIds = '';\n            \n            placeholder.find( 'table > tbody > tr.checked' ).each( function() {\n            \n                var checkboxColumn = $( this ).find( 'td.checkboxColumn' );\n                commaSeparatedIds += ( checkboxColumn.attr( 'notification' ) + ',' );\n            });\n            \n            if( commaSeparatedIds.length > 0 ){\n            \n                // remove the last char ( a rogue comma )\n                commaSeparatedIds = commaSeparatedIds.slice(0 , -1 ); \n                \n                $.ajax({\n                type: 'GET',\n                url: '/pentaho/plugin/cns/api/deletenotifications?paramnotifications=' + commaSeparatedIds,\n                success: function ( xhr ) {\n                  render_notifications.update();\n                }\n              });\n            }\n        });\n        \n        placeholder.find('.dataTables_wrapper').prepend('<div class=\"action-buttons-container pull-left\"></div>');\n        placeholder.find('.action-buttons-container').append( $deleteButton )\n                                                     .append( $markReadButton )\n                                                     .append( $markUnreadButton );\n        \n        // add actions selector\n        var actionsSelector = '<div class=\"pull-left actions-selector\">'\n                            + '<div class=\"selector-button\"><span class=\"selected-text\">All</span></div>'\n                            + '<div class=\"selector-dropdown\">'\n                            + '<button id=\"filterAll\" data-value=\"all\">All</button>'\n                            + '<button id=\"filterRead\" data-value=\"read\">Read</button>'\n                            + '<button id=\"filterUnread\" data-value=\"unread\">Unread</button>'\n                            + '</div>'\n                            + '</div>';\n        placeholder.find('.actions-container').append(actionsSelector);\n        placeholder.find('.selected-text').text(Dashboards.getParameterValue(\"showFilter\"));\n        placeholder.find('.selector-dropdown button[data-value=\"' + Dashboards.getParameterValue(\"showFilter\") + '\"]').addClass('selected');\n        \n        // add actions selector interaction\n        placeholder.find('.actions-container .selector-button').click(function() {\n            $(this).closest('.actions-selector').toggleClass('open');       \n        });\n        \n        // add interaction to mark as read button\n        placeholder.find('#markRead').click(function() {\n            $(this).closest('.actions-selector').toggleClass('open');   \n            \n            var commaSeparatedIds = '';\n            \n            placeholder.find( 'table > tbody > tr.checked' ).each( function() {\n            \n                var checkboxColumn = $( this ).find( 'td.checkboxColumn' );\n                commaSeparatedIds += ( checkboxColumn.attr( 'notification' ) + ',' );\n            });\n            \n            if( commaSeparatedIds.length > 0 ){\n            \n                // remove the last char ( a rogue comma )\n                commaSeparatedIds = commaSeparatedIds.slice(0 , -1 ); \n                \n                $.ajax({\n                type: 'GET',\n                url: '/pentaho/plugin/cns/api/updatenotificationsunreadflag?paramunread=false&paramnotifications=' + commaSeparatedIds,\n                success: function ( xhr ) {\n                  render_notifications.update();\n                }\n              });\n            }\n        });\n        \n        // add interaction to mark as unread button\n        placeholder.find('#markUnread').click(function() {\n            $(this).closest('.actions-selector').toggleClass('open');   \n            \n            var commaSeparatedIds = '';\n            \n            placeholder.find( 'table > tbody > tr.checked' ).each( function() {\n            \n                var checkboxColumn = $( this ).find( 'td.checkboxColumn' );\n                commaSeparatedIds += ( checkboxColumn.attr( 'notification' ) + ',' );\n            });\n            \n            if( commaSeparatedIds.length > 0 ){\n            \n                // remove the last char ( a rogue comma )\n                commaSeparatedIds = commaSeparatedIds.slice(0 , -1 ); \n                \n                $.ajax({\n                type: 'GET',\n                url: '/pentaho/plugin/cns/api/updatenotificationsunreadflag?paramunread=true&paramnotifications=' + commaSeparatedIds,\n                success: function ( xhr ) {\n                  render_notifications.update();\n                }\n              });\n            }\n        });\n        \n        // add interaction to filter buttons\n        placeholder.find('.actions-selector .selector-dropdown button').click(function(e) {\n            var buttonText = $(this).text(),\n                filterParam;\n            $(this).closest('.actions-selector').toggleClass('open');\n            $(this).closest('.actions-selector').find(\".selected-text\")\n                                                .text(buttonText);\n            \n            // update showFilter parameter\n            if(buttonText == \"Unread\") Dashboards.fireChange( \"showFilter\",  \"unread\" );\n            if(buttonText == \"Read\") Dashboards.fireChange( \"showFilter\",  \"read\" );\n            if(buttonText == \"All\") Dashboards.fireChange( \"showFilter\",  \"all\" );\n            \n        });\n        \n        $(document).mouseup(function (e) {\n            var container = $('.actions-selector');\n                    \n            if (!container.is(e.target) // if the target of the click isn't the container...\n                && container.has(e.target).length === 0 ) // ... nor a descendant of the container\n            {\n                container.removeClass('open');\n            }\n        });\n    }\n    \n    // check if paginate container exists\n    var paginateContainerAdded = placeholder.find('.paginate-container').length > 0;\n    \n    if(!actionsContainerAdded) {// add actions div\n        placeholder.find('.dataTables_wrapper').append('<div class=\"paginate-container pull-right clearfix\"></div>');\n        var paginateContainer = placeholder.find('.paginate-container');\n        \n        // move pagination info and pagination into paginate-container\n        placeholder.find(\".dataTables_paginate\").detach().appendTo(paginateContainer);\n        placeholder.find(\".dataTables_info\").detach().appendTo(paginateContainer);\n        \n    }\n    \n    // remove unnecessary 'Search:' text from search label\n    var $filterSearchBox = $( placeholder.find('div#tableObjTable_filter > label') );\n    if( $filterSearchBox && $filterSearchBox[0] && $filterSearchBox[0].firstChild.nodeType == 3 /* Node.TEXT_NODE */ ){\n        $filterSearchBox[0].removeChild( $filterSearchBox[0].firstChild );\n    }\n} ",
      "type": "JavaScript"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "extraOptions",
      "value": "[]",
      "type": "OptionArray"
     },
     {
      "name": "clickAction",
      "value": "",
      "type": "JavaScript"
     }
    ]
   },
   {
    "id": "GENERIC",
    "name": "Generic",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "Generic",
      "type": "Label"
     }
    ]
   },
   {
    "id": "265078ba-c676-abea-1125-ab324033b703",
    "type": "ComponentsParameter",
    "typeDesc": "Simple parameter",
    "parent": "GENERIC",
    "properties": [
     {
      "name": "name",
      "value": "showFilter",
      "type": "Id"
     },
     {
      "name": "propertyValue",
      "value": "all",
      "type": "String"
     },
     {
      "name": "parameterViewRole",
      "value": "unused",
      "type": "parameterViewRoleCustom"
     },
     {
      "name": "bookmarkable",
      "value": "false",
      "type": "Boolean"
     }
    ]
   }
  ]
 },
 "datasources": {
  "rows": [
   {
    "id": "SQL",
    "name": "SQL Queries",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "SQL Queries",
      "type": "Label"
     }
    ]
   },
   {
    "id": "0a56c773-c21a-33cb-c9aa-716d1c31731a",
    "type": "Componentssql_sqlJndi",
    "typeDesc": "sql over sqlJndi",
    "meta": "CDA",
    "meta_conntype": "sql.jndi",
    "meta_datype": "sql",
    "parent": "SQL",
    "properties": [
     {
      "name": "name",
      "value": "dummy",
      "type": "Id"
     },
     {
      "name": "access",
      "value": "public",
      "type": "Access"
     },
     {
      "name": "jndi",
      "value": "",
      "type": "Jndi"
     },
     {
      "name": "query",
      "value": "",
      "type": "SqlQuery"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "CdaParameters"
     },
     {
      "name": "output",
      "value": "[]",
      "type": "IndexArray"
     },
     {
      "name": "outputMode",
      "value": "include",
      "type": "OutputMode"
     },
     {
      "name": "cdacolumns",
      "value": "[]",
      "type": "CdaColumnsArray"
     },
     {
      "name": "cdacalculatedcolumns",
      "value": "[]",
      "type": "CdaCalculatedColumnsArray"
     },
     {
      "name": "cacheDuration",
      "value": 3600,
      "type": "Integer"
     },
     {
      "name": "cache",
      "value": "true",
      "type": "Boolean"
     }
    ]
   },
   {
    "id": "CNP_CPKENDPOINTS",
    "name": "CNP Endpoints",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "CNP Endpoints",
      "type": "Label"
     }
    ]
   },
   {
    "id": "8ac3ba83-2753-1f74-21eb-0fd0b745988d",
    "type": "Componentscns_getNotifications_CPKENDPOINT",
    "typeDesc": "getNotifications Endpoint",
    "parent": "CNP_CPKENDPOINTS",
    "properties": [
     {
      "name": "name",
      "value": "notifications",
      "type": "Id"
     },
     {
      "name": "stepName",
      "value": "OUTPUT",
      "type": "String"
     },
     {
      "name": "kettleOutput",
      "value": "Inferred",
      "type": "kettleOutputCustom"
     }
    ],
    "meta": "CPK",
    "meta_pluginId": "cns",
    "meta_endpoint": "getNotifications"
   }
  ]
 },
 "filename": "/system/cns/dashboards/notifications.cdfde"
}